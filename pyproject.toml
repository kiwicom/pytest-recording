[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pytest-recording"
version = "0.13.4"
description = "A pytest plugin powered by VCR.py to record and replay HTTP traffic"
keywords = ["pytest", "vcr", "network", "mock"]
authors = [{ name = "Dmitry Dygalo", email = "dmitry@dygalo.dev" }]
maintainers = [{ name = "Dmitry Dygalo", email = "dmitry@dygalo.dev" }]
requires-python = ">=3.9"
license = "MIT"
readme = "README.rst"
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Testing",
    "Typing :: Typed",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Operating System :: OS Independent",
]
dependencies = [
    "vcrpy>=2.0.1",
    "pytest>=3.5.0"
]
[project.optional-dependencies]
tests = [
    "pytest-httpbin",
    "pytest-mock",
    "requests",
    "Werkzeug==3.1.3"
]
dev = ["pytest_recording[tests]"]

[project.urls]
Documentation = "https://github.com/kiwicom/pytest-recording"
Changelog = "https://github.com/kiwicom/pytest-recording/blob/master/docs/changelog.rst"
"Bug Tracker" = "https://github.com/kiwicom/pytest-recording/issues"
"Source Code" = "https://github.com/kiwicom/pytest-recording"

[project.entry-points.pytest11]
recording = "pytest_recording.plugin"

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "D", # pydocstyle
    "I", # isort
    "T", # prints
    "FIX", # fixme comments
]
ignore = [
    "E501", # Line too long, handled by ruff
    "B008", # Do not perform function calls in argument defaults
    "C901", # Too complex
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "D203", # One blank line before class
    "D213", # Multiline summary second line
    "D401", # Imperative mood
]

[tool.ruff.format]
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
known-first-party = ["pytest_recording"]
known-third-party = ["_pytest", "packaging", "pytest", "vcr", "yaml"]
